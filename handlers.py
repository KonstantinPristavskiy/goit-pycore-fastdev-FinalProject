from address_book import Record, AddressBook
from decorators import input_error

@input_error
def contact_set(args, book: AddressBook):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É 'contact set'.
    - –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.
    - –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —ñ–º'—è, –ø–æ–ª–µ —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–æ–¥–∞—î/–æ–Ω–æ–≤–ª—é—î –ø–æ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É.
    """
    if not args:
        return "Usage: contact set <name> or contact set <name> <field> <value>"

    field_keywords = ['phone', 'email', 'address', 'birthday']
    field = None
    field_index = -1

    # –ü–æ—à—É–∫ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—è (phone, email —ñ —Ç.–¥.) –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö,
    # —â–æ–± –≤—ñ–¥–æ–∫—Ä–µ–º–∏—Ç–∏ —ñ–º'—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –∫–æ–º–∞–Ω–¥–∏.
    for i, part in enumerate(args):
        if part.lower() in field_keywords:
            field = part.lower()
            field_index = i
            break
    
    # –Ø–∫—â–æ –ø–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è —è–∫ 'contact set <name>'.
    if not field:
        name = " ".join(args)
        if book.find(name):
            return f"‚ùå Contact '{name}' already exists."
        record = Record(name)
        book.add_record(record)
        return f"‚úÖ Contact '{name}' created."

    # –Ø–∫—â–æ –ø–æ–ª–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ä–æ–∑–±–∏—Ä–∞—î–º–æ —ñ–º'—è —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è.
    name = " ".join(args[:field_index])
    value_parts = args[field_index + 1:]

    if not name:
        return "‚ùå Contact name is missing."
    if not value_parts:
        return f"‚ùå Value for field '{field}' is missing."

    record = book.find(name)
    created_msg = ""
    if not record:
        record = Record(name)
        book.add_record(record)
        created_msg = f"‚úÖ Contact '{name}' created. "

    if field == 'phone':
        record.add_phone(value_parts[0])
        return created_msg + f"üìû Phone {value_parts[0]} added to '{name}'."
    elif field == 'email':
        record.set_email(value_parts[0])
        return created_msg + f"‚úâÔ∏è Email for '{name}' set."
    elif field == 'address':
        value = " ".join(value_parts)
        record.set_address(value)
        return created_msg + f"üìç Address for '{name}' set."
    elif field == 'birthday':
        record.set_birthday(value_parts[0])
        return created_msg + f"üéâ Birthday for '{name}' set."

@input_error
def contact_get(args, book: AddressBook):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É 'contact get'.
    - 'birthdays [days]': –ø–æ–∫–∞–∑—É—î –º–∞–π–±—É—Ç–Ω—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.
    - 'all': –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.
    - '<query>': —à—É–∫–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º.
    """
    if not args:
        return "Usage: contact get <name|all|birthdays [days]|query>"

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ 'birthdays'
    if args[0].lower() == 'birthdays':
        days = 7
        if len(args) > 1:
            try:
                days = int(args[1])
                if days <= 0:
                    return "‚ùå Please enter a positive number of days."
            except ValueError:
                return "‚ùå Invalid number of days. Please provide an integer."
        
        upcoming = book.get_upcoming_birthdays(days)
        if upcoming:
            return f"üéâ Upcoming birthdays in the next {days} days:\n" + "\n".join(upcoming)
        return f"üéâ No birthdays in the next {days} days."

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ 'all'
    if len(args) == 1 and args[0].lower() == 'all':
        if not book.data:
            return "üì≠ Address book is empty."
        return '\n'.join(str(record) for record in book.data.values())

    # –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º –∞–±–æ —ñ–Ω—à–∏–º–∏ –ø–æ–ª—è–º–∏
    query = " ".join(args)
    record = book.find(query)
    if record:
        return str(record)

    results = book.search_contacts(query)
    if results:
        return "üîé Found contacts:\n" + "\n".join(str(record) for record in results)
    
    return f"‚ùå No contacts found for '{query}'."

@input_error
def contact_delete(args, book: AddressBook):
    """–í–∏–¥–∞–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ —ñ–º–µ–Ω–µ–º."""
    if not args:
        return "Usage: contact delete <name>"
    name = " ".join(args)
    if book.find(name):
        book.delete(name)
        return f"üóëÔ∏è Contact '{name}' deleted."
    else:
        return f"‚ùå Contact '{name}' not found."

def show_help():
    """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    return """üìñ Available commands:
- contact set <name>                  - Create a new contact
- contact set <name> <field> <value>  - Add/Update contact field (phone, email, address, birthday)
- contact get <name|all|search_query> - Get contact info
- contact get birthdays [days]        - Show birthdays in the next 7 days (or specified days)
- contact delete <name>               - Delete a contact
- help                              - Show this help
- close / exit                      - Save and exit
"""

