# shlex - —Ü–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è —Ä—è–¥–∫—ñ–≤ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
import shlex
from classbot.storage import load_data, save_data, FILENAME
from classbot.handlers import (
    contact_set, contact_get, contact_delete, show_help, note_set,
    note_get, note_delete)
from classbot.notebook import NoteBook 
from classbot.guesser import guess_command
from classbot.address_book import AddressBook
from classbot.console import console, success, error, info, warning, show_panel, rule


def parse_input(user_input):
    """
    –†–æ–∑–±–∏—Ä–∞—î –≤–≤–µ–¥–µ–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É –∫–æ–º–∞–Ω–¥—É, –ø—ñ–¥–∫–æ–º–∞–Ω–¥—É —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –ª–∞–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
    –ü—Ä–∏–∫–ª–∞–¥: 'note set "my title" "content here"' -> ('note', 'set', ['my title', 'content here'])
    """
    stripped = user_input.strip()
    if not stripped:
        return None, None, []
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ shlex –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ª–∞–ø–æ–∫
        parts = shlex.split(stripped)
    except ValueError:
        # –Ø–∫—â–æ –ª–∞–ø–∫–∏ –Ω–µ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π split
        parts = stripped.split()
    
    command = parts[0].lower()
    
    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ 'contact' –∞–±–æ 'note', —Ç–æ –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏ –Ω–µ–º–∞—î
    if command != 'contact' and command != 'note':
        return command, None, parts[1:]

    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ 'contact'/'note', –∞–ª–µ –Ω–µ–º–∞—î –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏
    if len(parts) < 2:
        return command, None, []

    sub_command = parts[1].lower()
    args = parts[2:]
    return command, sub_command, args

def main():
    data = load_data()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏, —ñ –Ω–æ—Ç–∞—Ç–∫–∏
    book = data.get('contacts', AddressBook())
    notebook = data.get('notes', NoteBook())

    # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    contact_commands = {
        "set": contact_set,
        "get": contact_get, 
        "delete": contact_delete,
    }

    # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –Ω–æ—Ç–∞—Ç–æ–∫
    note_commands = {
        "set": note_set,
        "get": note_get,
        "delete": note_delete,
    }
    rule("Welcome to CLASS CLI Assistant ü§ñ")
    info("Type 'help' to see available commands.\n")

    try:
        while True:
            user_input = console.input("üì• [bold cyan]Enter a command[/]: ")
            command, sub_command, args = parse_input(user_input)

            if not command:
                continue

            if command in ["close", "exit"]:
                success("Session ended. Goodbye!")
                break

            elif command == "help":
                show_panel("HELP", show_help())
            
            # –í–∏–∫–ª–∏–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ 'contact'
            elif command == 'contact':
                if sub_command in contact_commands:
                    response = contact_commands[sub_command](args, book)
                    if response: 
                        console.print(response)
                else:
                    suggestion = guess_command(command, sub_command)
                    if suggestion:
                        warning(f"Unknown subcommand '{sub_command}'. Did you mean '{suggestion}'?")
                    else:
                        error("Invalid contact command. Use: set, get, delete, or help.")
            
            # –í–∏–∫–ª–∏–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ 'note'
            elif command == 'note':
                if sub_command in note_commands:
                    response = note_commands[sub_command](args, notebook)
                    if response:
                        console.print(response)
                else:
                    suggestion = guess_command(command, sub_command)
                    if suggestion:
                        warning(f"Unknown subcommand '{sub_command}'. Did you mean '{suggestion}'?")
                    else:
                        error("Invalid note command. Use: set, get, delete, or help.")

            
            else:
                suggestion = guess_command(command, sub_command)
                if suggestion:
                    warning(f"Unknown command '{command} {sub_command or ''}'. Did you mean '{suggestion}'?")
                else:
                    error("Unknown command. Type 'help' to see available commands.")


    except KeyboardInterrupt:
        warning("\nProgram interrupted by user (Ctrl+C).")

    finally:
        save_data({'contacts': book, 'notes': notebook})
        success(f"All data saved to [bold]{FILENAME}[/].")
        rule("Goodbye üëã")

if __name__ == "__main__":
    main()
